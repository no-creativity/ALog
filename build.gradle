/*
 * MIT License
 *
 * Copyright (c) 2016 Yan QiDong
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'org.no_creativity:AnVerGen:1.0.0'
    }
}

repositories {
    jcenter()
}

import groovy.json.JsonBuilder
import org.no_creativity.anvergen.Git
import org.no_creativity.anvergen.Ver

apply plugin: 'com.android.library'
apply plugin: 'maven'

// noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"
    defaultConfig {
        minSdkVersion 8
        //noinspection OldTargetApi
        targetSdkVersion 24
        versionCode Ver.generateVersionCode()
        versionName Ver.generateVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

group 'org.no_creativity.aar'
version Ver.generateVersionName()

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile

    options {
        locale 'en'
        encoding 'UTF-8'
        charSet 'UTF-8'
        author true
        version true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def aarDir = "$buildDir/libs"
def aarName = "${project.name}-${version}.aar"

task copyAar(type: Copy, dependsOn: check) {
    from ("$buildDir/outputs/aar") {
        include '*-release.aar'
        rename '.*-release.aar', aarName
    }
    into aarDir
}

def date = new Date()
def travisDir = "$buildDir/travis"
def githubUrl = "https://github.com/no-creativity/${project.name}"
def pomFile = "$travisDir/${project.name}-${version}.pom"

task writePom << {
    pom {
        project {
            inceptionYear date.format('yyyy')
            licenses {
                license {
                    name 'MIT License'
                    url "$githubUrl/blob/master/LICENSE"
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'yanqd0'
                    name 'Yan QiDong'
                    email 'yanqd0@outlook.com'
                    url 'https://github.com/yanqd0'
                    timezone '+8'
                }
            }
            issueManagement {
                system 'github'
                url "$githubUrl/issues"
            }
        }
    }.writeTo(pomFile)
}

def packageDir = "${group.replace('.', '/')}/${project.name}"
def descriptorJson = "$travisDir/descriptor.json"

task writeDescriptor << {
    def tag = Git.getLatestTag()
    def versionDesc = {
        if (tag.equals(Git.getGitDescribe())) {
            return Git.getTagMessage(tag)
        } else {
            return Git.getCommitMessage()
        }
    }

    def builder = new JsonBuilder()
    def root = builder {
        'package' {
            name project.name
            repo 'maven'
            subject 'no-creativity'
            desc 'A Log wrapper for Android applications.'
            website_url githubUrl
            issue_tracker_url "$githubUrl/issues"
            vcs_url "${githubUrl}.git"
            github_use_tag_release_notes true
            github_release_notes_file 'README.md'
            labels 'android'
            public_download_numbers true
        }
        'version' {
            name version
            desc versionDesc()
            released date.format('yyyy-MM-dd')
            vcs_tag tag
            gpgSign true
        }
        publish true
    }
    root.files = []
    root.files.add([
            'includePattern': 'build/libs/(.*)',
            'uploadPattern' : "$packageDir/$version/\$1",
            'matrixParams'  : ['override': 1]
    ])
    root.files.add([
            'includePattern': "$travisDir/(.*\\.pom)",
            'uploadPattern' : "$packageDir/$version/\$1",
            'matrixParams'  : ['override': 1]
    ])

    def dir = new File(travisDir)
    if (!dir.isDirectory()) {
        dir.mkdir()
    }
    def jsonFile = new File(descriptorJson)
    jsonFile.write(builder.toPrettyString())
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives(file("$aarDir/$aarName")) {
        builtBy copyAar
    }
    archives(file(pomFile)) {
        builtBy writePom
    }
    archives(file(descriptorJson)) {
        builtBy writeDescriptor
    }
}
